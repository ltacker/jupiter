// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: laugh/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetHohoRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHohoRequest) Reset()         { *m = QueryGetHohoRequest{} }
func (m *QueryGetHohoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHohoRequest) ProtoMessage()    {}
func (*QueryGetHohoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{0}
}
func (m *QueryGetHohoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHohoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHohoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHohoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHohoRequest.Merge(m, src)
}
func (m *QueryGetHohoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHohoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHohoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHohoRequest proto.InternalMessageInfo

func (m *QueryGetHohoRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetHohoResponse struct {
	Hoho *Hoho `protobuf:"bytes,1,opt,name=Hoho,proto3" json:"Hoho,omitempty"`
}

func (m *QueryGetHohoResponse) Reset()         { *m = QueryGetHohoResponse{} }
func (m *QueryGetHohoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHohoResponse) ProtoMessage()    {}
func (*QueryGetHohoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{1}
}
func (m *QueryGetHohoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHohoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHohoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHohoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHohoResponse.Merge(m, src)
}
func (m *QueryGetHohoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHohoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHohoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHohoResponse proto.InternalMessageInfo

func (m *QueryGetHohoResponse) GetHoho() *Hoho {
	if m != nil {
		return m.Hoho
	}
	return nil
}

type QueryAllHohoRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHohoRequest) Reset()         { *m = QueryAllHohoRequest{} }
func (m *QueryAllHohoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHohoRequest) ProtoMessage()    {}
func (*QueryAllHohoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{2}
}
func (m *QueryAllHohoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHohoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHohoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHohoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHohoRequest.Merge(m, src)
}
func (m *QueryAllHohoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHohoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHohoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHohoRequest proto.InternalMessageInfo

func (m *QueryAllHohoRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHohoResponse struct {
	Hoho       []*Hoho             `protobuf:"bytes,1,rep,name=Hoho,proto3" json:"Hoho,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHohoResponse) Reset()         { *m = QueryAllHohoResponse{} }
func (m *QueryAllHohoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHohoResponse) ProtoMessage()    {}
func (*QueryAllHohoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{3}
}
func (m *QueryAllHohoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHohoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHohoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHohoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHohoResponse.Merge(m, src)
}
func (m *QueryAllHohoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHohoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHohoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHohoResponse proto.InternalMessageInfo

func (m *QueryAllHohoResponse) GetHoho() []*Hoho {
	if m != nil {
		return m.Hoho
	}
	return nil
}

func (m *QueryAllHohoResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHihiRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHihiRequest) Reset()         { *m = QueryGetHihiRequest{} }
func (m *QueryGetHihiRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHihiRequest) ProtoMessage()    {}
func (*QueryGetHihiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{4}
}
func (m *QueryGetHihiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHihiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHihiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHihiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHihiRequest.Merge(m, src)
}
func (m *QueryGetHihiRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHihiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHihiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHihiRequest proto.InternalMessageInfo

func (m *QueryGetHihiRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetHihiResponse struct {
	Hihi *Hihi `protobuf:"bytes,1,opt,name=Hihi,proto3" json:"Hihi,omitempty"`
}

func (m *QueryGetHihiResponse) Reset()         { *m = QueryGetHihiResponse{} }
func (m *QueryGetHihiResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHihiResponse) ProtoMessage()    {}
func (*QueryGetHihiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{5}
}
func (m *QueryGetHihiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHihiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHihiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHihiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHihiResponse.Merge(m, src)
}
func (m *QueryGetHihiResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHihiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHihiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHihiResponse proto.InternalMessageInfo

func (m *QueryGetHihiResponse) GetHihi() *Hihi {
	if m != nil {
		return m.Hihi
	}
	return nil
}

type QueryAllHihiRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHihiRequest) Reset()         { *m = QueryAllHihiRequest{} }
func (m *QueryAllHihiRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHihiRequest) ProtoMessage()    {}
func (*QueryAllHihiRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{6}
}
func (m *QueryAllHihiRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHihiRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHihiRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHihiRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHihiRequest.Merge(m, src)
}
func (m *QueryAllHihiRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHihiRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHihiRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHihiRequest proto.InternalMessageInfo

func (m *QueryAllHihiRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHihiResponse struct {
	Hihi       []*Hihi             `protobuf:"bytes,1,rep,name=Hihi,proto3" json:"Hihi,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHihiResponse) Reset()         { *m = QueryAllHihiResponse{} }
func (m *QueryAllHihiResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHihiResponse) ProtoMessage()    {}
func (*QueryAllHihiResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{7}
}
func (m *QueryAllHihiResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHihiResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHihiResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHihiResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHihiResponse.Merge(m, src)
}
func (m *QueryAllHihiResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHihiResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHihiResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHihiResponse proto.InternalMessageInfo

func (m *QueryAllHihiResponse) GetHihi() []*Hihi {
	if m != nil {
		return m.Hihi
	}
	return nil
}

func (m *QueryAllHihiResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHahaRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHahaRequest) Reset()         { *m = QueryGetHahaRequest{} }
func (m *QueryGetHahaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHahaRequest) ProtoMessage()    {}
func (*QueryGetHahaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{8}
}
func (m *QueryGetHahaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHahaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHahaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHahaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHahaRequest.Merge(m, src)
}
func (m *QueryGetHahaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHahaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHahaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHahaRequest proto.InternalMessageInfo

func (m *QueryGetHahaRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetHahaResponse struct {
	Haha *Haha `protobuf:"bytes,1,opt,name=Haha,proto3" json:"Haha,omitempty"`
}

func (m *QueryGetHahaResponse) Reset()         { *m = QueryGetHahaResponse{} }
func (m *QueryGetHahaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHahaResponse) ProtoMessage()    {}
func (*QueryGetHahaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{9}
}
func (m *QueryGetHahaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHahaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHahaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHahaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHahaResponse.Merge(m, src)
}
func (m *QueryGetHahaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHahaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHahaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHahaResponse proto.InternalMessageInfo

func (m *QueryGetHahaResponse) GetHaha() *Haha {
	if m != nil {
		return m.Haha
	}
	return nil
}

type QueryAllHahaRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHahaRequest) Reset()         { *m = QueryAllHahaRequest{} }
func (m *QueryAllHahaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHahaRequest) ProtoMessage()    {}
func (*QueryAllHahaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{10}
}
func (m *QueryAllHahaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHahaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHahaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHahaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHahaRequest.Merge(m, src)
}
func (m *QueryAllHahaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHahaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHahaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHahaRequest proto.InternalMessageInfo

func (m *QueryAllHahaRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHahaResponse struct {
	Haha       []*Haha             `protobuf:"bytes,1,rep,name=Haha,proto3" json:"Haha,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHahaResponse) Reset()         { *m = QueryAllHahaResponse{} }
func (m *QueryAllHahaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHahaResponse) ProtoMessage()    {}
func (*QueryAllHahaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{11}
}
func (m *QueryAllHahaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHahaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHahaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHahaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHahaResponse.Merge(m, src)
}
func (m *QueryAllHahaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHahaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHahaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHahaResponse proto.InternalMessageInfo

func (m *QueryAllHahaResponse) GetHaha() []*Haha {
	if m != nil {
		return m.Haha
	}
	return nil
}

func (m *QueryAllHahaResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHohosentRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHohosentRequest) Reset()         { *m = QueryGetHohosentRequest{} }
func (m *QueryGetHohosentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHohosentRequest) ProtoMessage()    {}
func (*QueryGetHohosentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{12}
}
func (m *QueryGetHohosentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHohosentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHohosentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHohosentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHohosentRequest.Merge(m, src)
}
func (m *QueryGetHohosentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHohosentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHohosentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHohosentRequest proto.InternalMessageInfo

func (m *QueryGetHohosentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetHohosentResponse struct {
	Hohosent *Hohosent `protobuf:"bytes,1,opt,name=Hohosent,proto3" json:"Hohosent,omitempty"`
}

func (m *QueryGetHohosentResponse) Reset()         { *m = QueryGetHohosentResponse{} }
func (m *QueryGetHohosentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHohosentResponse) ProtoMessage()    {}
func (*QueryGetHohosentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{13}
}
func (m *QueryGetHohosentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHohosentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHohosentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHohosentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHohosentResponse.Merge(m, src)
}
func (m *QueryGetHohosentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHohosentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHohosentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHohosentResponse proto.InternalMessageInfo

func (m *QueryGetHohosentResponse) GetHohosent() *Hohosent {
	if m != nil {
		return m.Hohosent
	}
	return nil
}

type QueryAllHohosentRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHohosentRequest) Reset()         { *m = QueryAllHohosentRequest{} }
func (m *QueryAllHohosentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHohosentRequest) ProtoMessage()    {}
func (*QueryAllHohosentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{14}
}
func (m *QueryAllHohosentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHohosentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHohosentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHohosentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHohosentRequest.Merge(m, src)
}
func (m *QueryAllHohosentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHohosentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHohosentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHohosentRequest proto.InternalMessageInfo

func (m *QueryAllHohosentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHohosentResponse struct {
	Hohosent   []*Hohosent         `protobuf:"bytes,1,rep,name=Hohosent,proto3" json:"Hohosent,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHohosentResponse) Reset()         { *m = QueryAllHohosentResponse{} }
func (m *QueryAllHohosentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHohosentResponse) ProtoMessage()    {}
func (*QueryAllHohosentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{15}
}
func (m *QueryAllHohosentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHohosentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHohosentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHohosentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHohosentResponse.Merge(m, src)
}
func (m *QueryAllHohosentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHohosentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHohosentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHohosentResponse proto.InternalMessageInfo

func (m *QueryAllHohosentResponse) GetHohosent() []*Hohosent {
	if m != nil {
		return m.Hohosent
	}
	return nil
}

func (m *QueryAllHohosentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHihisentRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHihisentRequest) Reset()         { *m = QueryGetHihisentRequest{} }
func (m *QueryGetHihisentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHihisentRequest) ProtoMessage()    {}
func (*QueryGetHihisentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{16}
}
func (m *QueryGetHihisentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHihisentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHihisentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHihisentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHihisentRequest.Merge(m, src)
}
func (m *QueryGetHihisentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHihisentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHihisentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHihisentRequest proto.InternalMessageInfo

func (m *QueryGetHihisentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetHihisentResponse struct {
	Hihisent *Hihisent `protobuf:"bytes,1,opt,name=Hihisent,proto3" json:"Hihisent,omitempty"`
}

func (m *QueryGetHihisentResponse) Reset()         { *m = QueryGetHihisentResponse{} }
func (m *QueryGetHihisentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHihisentResponse) ProtoMessage()    {}
func (*QueryGetHihisentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{17}
}
func (m *QueryGetHihisentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHihisentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHihisentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHihisentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHihisentResponse.Merge(m, src)
}
func (m *QueryGetHihisentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHihisentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHihisentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHihisentResponse proto.InternalMessageInfo

func (m *QueryGetHihisentResponse) GetHihisent() *Hihisent {
	if m != nil {
		return m.Hihisent
	}
	return nil
}

type QueryAllHihisentRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHihisentRequest) Reset()         { *m = QueryAllHihisentRequest{} }
func (m *QueryAllHihisentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHihisentRequest) ProtoMessage()    {}
func (*QueryAllHihisentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{18}
}
func (m *QueryAllHihisentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHihisentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHihisentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHihisentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHihisentRequest.Merge(m, src)
}
func (m *QueryAllHihisentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHihisentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHihisentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHihisentRequest proto.InternalMessageInfo

func (m *QueryAllHihisentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHihisentResponse struct {
	Hihisent   []*Hihisent         `protobuf:"bytes,1,rep,name=Hihisent,proto3" json:"Hihisent,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHihisentResponse) Reset()         { *m = QueryAllHihisentResponse{} }
func (m *QueryAllHihisentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHihisentResponse) ProtoMessage()    {}
func (*QueryAllHihisentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{19}
}
func (m *QueryAllHihisentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHihisentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHihisentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHihisentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHihisentResponse.Merge(m, src)
}
func (m *QueryAllHihisentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHihisentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHihisentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHihisentResponse proto.InternalMessageInfo

func (m *QueryAllHihisentResponse) GetHihisent() []*Hihisent {
	if m != nil {
		return m.Hihisent
	}
	return nil
}

func (m *QueryAllHihisentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHahasentRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHahasentRequest) Reset()         { *m = QueryGetHahasentRequest{} }
func (m *QueryGetHahasentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHahasentRequest) ProtoMessage()    {}
func (*QueryGetHahasentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{20}
}
func (m *QueryGetHahasentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHahasentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHahasentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHahasentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHahasentRequest.Merge(m, src)
}
func (m *QueryGetHahasentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHahasentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHahasentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHahasentRequest proto.InternalMessageInfo

func (m *QueryGetHahasentRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryGetHahasentResponse struct {
	Hahasent *Hahasent `protobuf:"bytes,1,opt,name=Hahasent,proto3" json:"Hahasent,omitempty"`
}

func (m *QueryGetHahasentResponse) Reset()         { *m = QueryGetHahasentResponse{} }
func (m *QueryGetHahasentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHahasentResponse) ProtoMessage()    {}
func (*QueryGetHahasentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{21}
}
func (m *QueryGetHahasentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHahasentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHahasentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHahasentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHahasentResponse.Merge(m, src)
}
func (m *QueryGetHahasentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHahasentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHahasentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHahasentResponse proto.InternalMessageInfo

func (m *QueryGetHahasentResponse) GetHahasent() *Hahasent {
	if m != nil {
		return m.Hahasent
	}
	return nil
}

type QueryAllHahasentRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHahasentRequest) Reset()         { *m = QueryAllHahasentRequest{} }
func (m *QueryAllHahasentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHahasentRequest) ProtoMessage()    {}
func (*QueryAllHahasentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{22}
}
func (m *QueryAllHahasentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHahasentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHahasentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHahasentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHahasentRequest.Merge(m, src)
}
func (m *QueryAllHahasentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHahasentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHahasentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHahasentRequest proto.InternalMessageInfo

func (m *QueryAllHahasentRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHahasentResponse struct {
	Hahasent   []*Hahasent         `protobuf:"bytes,1,rep,name=Hahasent,proto3" json:"Hahasent,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHahasentResponse) Reset()         { *m = QueryAllHahasentResponse{} }
func (m *QueryAllHahasentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHahasentResponse) ProtoMessage()    {}
func (*QueryAllHahasentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_20e761161a361861, []int{23}
}
func (m *QueryAllHahasentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHahasentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHahasentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHahasentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHahasentResponse.Merge(m, src)
}
func (m *QueryAllHahasentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHahasentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHahasentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHahasentResponse proto.InternalMessageInfo

func (m *QueryAllHahasentResponse) GetHahasent() []*Hahasent {
	if m != nil {
		return m.Hahasent
	}
	return nil
}

func (m *QueryAllHahasentResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetHohoRequest)(nil), "ltacker.jupiter.laugh.QueryGetHohoRequest")
	proto.RegisterType((*QueryGetHohoResponse)(nil), "ltacker.jupiter.laugh.QueryGetHohoResponse")
	proto.RegisterType((*QueryAllHohoRequest)(nil), "ltacker.jupiter.laugh.QueryAllHohoRequest")
	proto.RegisterType((*QueryAllHohoResponse)(nil), "ltacker.jupiter.laugh.QueryAllHohoResponse")
	proto.RegisterType((*QueryGetHihiRequest)(nil), "ltacker.jupiter.laugh.QueryGetHihiRequest")
	proto.RegisterType((*QueryGetHihiResponse)(nil), "ltacker.jupiter.laugh.QueryGetHihiResponse")
	proto.RegisterType((*QueryAllHihiRequest)(nil), "ltacker.jupiter.laugh.QueryAllHihiRequest")
	proto.RegisterType((*QueryAllHihiResponse)(nil), "ltacker.jupiter.laugh.QueryAllHihiResponse")
	proto.RegisterType((*QueryGetHahaRequest)(nil), "ltacker.jupiter.laugh.QueryGetHahaRequest")
	proto.RegisterType((*QueryGetHahaResponse)(nil), "ltacker.jupiter.laugh.QueryGetHahaResponse")
	proto.RegisterType((*QueryAllHahaRequest)(nil), "ltacker.jupiter.laugh.QueryAllHahaRequest")
	proto.RegisterType((*QueryAllHahaResponse)(nil), "ltacker.jupiter.laugh.QueryAllHahaResponse")
	proto.RegisterType((*QueryGetHohosentRequest)(nil), "ltacker.jupiter.laugh.QueryGetHohosentRequest")
	proto.RegisterType((*QueryGetHohosentResponse)(nil), "ltacker.jupiter.laugh.QueryGetHohosentResponse")
	proto.RegisterType((*QueryAllHohosentRequest)(nil), "ltacker.jupiter.laugh.QueryAllHohosentRequest")
	proto.RegisterType((*QueryAllHohosentResponse)(nil), "ltacker.jupiter.laugh.QueryAllHohosentResponse")
	proto.RegisterType((*QueryGetHihisentRequest)(nil), "ltacker.jupiter.laugh.QueryGetHihisentRequest")
	proto.RegisterType((*QueryGetHihisentResponse)(nil), "ltacker.jupiter.laugh.QueryGetHihisentResponse")
	proto.RegisterType((*QueryAllHihisentRequest)(nil), "ltacker.jupiter.laugh.QueryAllHihisentRequest")
	proto.RegisterType((*QueryAllHihisentResponse)(nil), "ltacker.jupiter.laugh.QueryAllHihisentResponse")
	proto.RegisterType((*QueryGetHahasentRequest)(nil), "ltacker.jupiter.laugh.QueryGetHahasentRequest")
	proto.RegisterType((*QueryGetHahasentResponse)(nil), "ltacker.jupiter.laugh.QueryGetHahasentResponse")
	proto.RegisterType((*QueryAllHahasentRequest)(nil), "ltacker.jupiter.laugh.QueryAllHahasentRequest")
	proto.RegisterType((*QueryAllHahasentResponse)(nil), "ltacker.jupiter.laugh.QueryAllHahasentResponse")
}

func init() { proto.RegisterFile("laugh/query.proto", fileDescriptor_20e761161a361861) }

var fileDescriptor_20e761161a361861 = []byte{
	// 794 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0x3f, 0x6f, 0xd4, 0x3e,
	0x18, 0xc7, 0x9b, 0xbb, 0xdf, 0x8f, 0x3f, 0xae, 0x40, 0x10, 0x8a, 0xa8, 0xae, 0x70, 0x2d, 0x01,
	0xda, 0x52, 0x90, 0xad, 0x96, 0x91, 0xa9, 0x1d, 0x28, 0x23, 0x74, 0x41, 0x42, 0x62, 0xf0, 0xb5,
	0xd6, 0xd9, 0x90, 0x9e, 0xaf, 0x97, 0x1c, 0xa2, 0x42, 0x2c, 0x2c, 0x88, 0xad, 0x12, 0x03, 0x62,
	0xe3, 0xe5, 0x30, 0x56, 0x62, 0x61, 0x44, 0x2d, 0x1b, 0x6f, 0x02, 0xd9, 0x79, 0x72, 0x71, 0xd2,
	0x34, 0x76, 0xa4, 0x66, 0xc4, 0x7a, 0xbe, 0xf6, 0xe7, 0x3e, 0x0f, 0xce, 0xe3, 0xa2, 0xab, 0x21,
	0x1d, 0xf7, 0x39, 0xd9, 0x1b, 0xb3, 0xd1, 0x3e, 0x1e, 0x8e, 0x64, 0x2c, 0xfd, 0xeb, 0x61, 0x4c,
	0xb7, 0xdf, 0xb0, 0x11, 0x7e, 0x3d, 0x1e, 0x8a, 0x98, 0x8d, 0xb0, 0x2e, 0xe9, 0xdc, 0xec, 0x4b,
	0xd9, 0x0f, 0x19, 0xa1, 0x43, 0x41, 0xe8, 0x60, 0x20, 0x63, 0x1a, 0x0b, 0x39, 0x88, 0x92, 0x50,
	0x67, 0x65, 0x5b, 0x46, 0xbb, 0x32, 0x22, 0x3d, 0x1a, 0xb1, 0x64, 0x37, 0xf2, 0x76, 0xb5, 0xc7,
	0x62, 0xba, 0x4a, 0x86, 0xb4, 0x2f, 0x06, 0xba, 0x18, 0x6a, 0xaf, 0x24, 0x67, 0x72, 0xc9, 0x65,
	0x61, 0x45, 0x70, 0x51, 0x58, 0xa1, 0x9c, 0xc2, 0xca, 0x4c, 0x96, 0x8a, 0xd8, 0x20, 0x2e, 0xac,
	0x0a, 0x2e, 0x4a, 0x56, 0x29, 0xa7, 0xd9, 0x6a, 0x70, 0x0f, 0x5d, 0x7b, 0xae, 0xc8, 0x36, 0x59,
	0xfc, 0x54, 0x72, 0xb9, 0xc5, 0xf6, 0xc6, 0x2c, 0x8a, 0xfd, 0xcb, 0xa8, 0x25, 0x76, 0x66, 0xbd,
	0x05, 0x6f, 0xf9, 0xe2, 0x56, 0x4b, 0xec, 0x04, 0x9b, 0x68, 0x26, 0x5f, 0x16, 0x0d, 0xe5, 0x20,
	0x62, 0x3e, 0x41, 0xff, 0xa9, 0x7f, 0xeb, 0xca, 0xe9, 0xb5, 0x39, 0x5c, 0xaa, 0x09, 0xeb, 0x88,
	0x2e, 0x0c, 0x5e, 0xc1, 0x79, 0xeb, 0x61, 0x68, 0x9e, 0xf7, 0x04, 0xa1, 0x4c, 0x09, 0xec, 0xb6,
	0x88, 0x13, 0x7f, 0x58, 0xf9, 0xc3, 0x49, 0x37, 0xc0, 0x1f, 0x7e, 0x46, 0xfb, 0x0c, 0xb2, 0x5b,
	0x46, 0x32, 0x38, 0xf0, 0x00, 0x74, 0xb2, 0xff, 0x09, 0xd0, 0xb6, 0x13, 0xa8, 0xbf, 0x99, 0x23,
	0x6a, 0x69, 0xa2, 0x25, 0x2b, 0x51, 0x72, 0x5a, 0x0e, 0xc9, 0x34, 0x2c, 0xb8, 0x70, 0x31, 0xac,
	0xcb, 0x0c, 0x70, 0xc1, 0x85, 0xcd, 0xb0, 0x8a, 0xe8, 0xc2, 0x9c, 0x61, 0xe3, 0xbc, 0x46, 0x0c,
	0x97, 0x83, 0xb6, 0x9d, 0x40, 0x9b, 0x31, 0x4c, 0x39, 0x75, 0x31, 0xac, 0xcb, 0x0c, 0x70, 0xca,
	0xa9, 0xcd, 0xb0, 0x8a, 0xe8, 0xc2, 0x9c, 0x61, 0xe3, 0xbc, 0x46, 0x0c, 0x97, 0x83, 0xb6, 0x9d,
	0x40, 0xcf, 0xce, 0xf0, 0x7d, 0x74, 0xc3, 0xbc, 0xfe, 0xea, 0xfb, 0x71, 0x9a, 0xe5, 0x17, 0x68,
	0xf6, 0x64, 0x29, 0xfc, 0x80, 0xc7, 0xe8, 0x42, 0xba, 0x06, 0x7e, 0xe6, 0x2b, 0x2e, 0xa2, 0x8e,
	0x4e, 0x02, 0x01, 0x05, 0x06, 0xb8, 0xd9, 0x26, 0xc3, 0x59, 0x99, 0xff, 0xee, 0x01, 0x7c, 0xee,
	0x8c, 0x52, 0xf8, 0x76, 0x2d, 0xf8, 0x66, 0x3a, 0x01, 0xdf, 0x77, 0x97, 0x4e, 0x4c, 0x4a, 0x8d,
	0x1f, 0x03, 0x6b, 0xb6, 0x4e, 0xa4, 0xd1, 0x49, 0x20, 0xd7, 0x89, 0x02, 0x43, 0x23, 0x9d, 0xa8,
	0x86, 0x6f, 0xd7, 0x82, 0x6f, 0xa6, 0x13, 0x30, 0x53, 0x5d, 0x3a, 0x31, 0x29, 0x35, 0x7e, 0x0c,
	0xac, 0xd9, 0x3a, 0x91, 0x46, 0x27, 0x81, 0x5c, 0x27, 0x0a, 0x0c, 0x8d, 0x74, 0xa2, 0x1a, 0xbe,
	0x5d, 0x0b, 0xfe, 0xcc, 0x3a, 0xb1, 0xf6, 0xf7, 0x12, 0xfa, 0x5f, 0x23, 0xfa, 0x9f, 0xbd, 0x64,
	0xcc, 0xfb, 0x2b, 0xa7, 0x60, 0x94, 0xbc, 0x75, 0x3a, 0x0f, 0x9c, 0x6a, 0x93, 0x73, 0x83, 0xe5,
	0x8f, 0x3f, 0xff, 0x7c, 0x69, 0x05, 0xfe, 0x02, 0x81, 0x10, 0x81, 0x10, 0xc9, 0x9e, 0x62, 0xe4,
	0xbd, 0xd8, 0xf9, 0xe0, 0x7f, 0xf2, 0xd0, 0x79, 0x15, 0x5d, 0x0f, 0xc3, 0x6a, 0x9c, 0xfc, 0x53,
	0xa8, 0x1a, 0xa7, 0xf0, 0xac, 0x09, 0xee, 0x68, 0x9c, 0x5b, 0xfe, 0x5c, 0x05, 0x4e, 0x62, 0x45,
	0x4d, 0x5c, 0xab, 0x95, 0xec, 0xbd, 0x60, 0xb7, 0x62, 0xcc, 0x7e, 0xbb, 0x15, 0xc1, 0x85, 0x61,
	0x45, 0x70, 0xe1, 0x64, 0xc5, 0x15, 0xa7, 0xf0, 0x14, 0xb1, 0x5b, 0x51, 0x32, 0xb4, 0x15, 0x35,
	0x25, 0xad, 0x56, 0xb2, 0x19, 0x6f, 0xb7, 0x62, 0xcc, 0x6b, 0xbb, 0x15, 0xca, 0xa9, 0x61, 0x85,
	0x72, 0xea, 0x64, 0xc5, 0x15, 0xa7, 0xf0, 0x7c, 0xb0, 0x5b, 0x51, 0x32, 0xbe, 0x79, 0xd9, 0x98,
	0xf3, 0xb1, 0xc3, 0xcd, 0x30, 0xbe, 0x39, 0x1d, 0xe2, 0x5c, 0x0f, 0x48, 0x0f, 0x35, 0xd2, 0xa2,
	0x7f, 0xb7, 0xe2, 0xbf, 0xaf, 0x0a, 0x24, 0x96, 0xbe, 0x7a, 0x68, 0x3a, 0xdd, 0x42, 0x99, 0xc2,
	0x0e, 0x37, 0xc5, 0x19, 0xaf, 0x64, 0xe4, 0x07, 0x4b, 0x1a, 0xef, 0xb6, 0x3f, 0x6f, 0xc1, 0x4b,
	0xac, 0xa5, 0x13, 0x06, 0x3b, 0xdc, 0x9c, 0x5a, 0xd6, 0x0a, 0xf3, 0xcf, 0x6e, 0x0d, 0x02, 0x86,
	0x35, 0x58, 0x71, 0xb2, 0x56, 0x07, 0xaf, 0x64, 0x3c, 0xdb, 0xad, 0xa5, 0xa2, 0xb4, 0xb5, 0x74,
	0x1a, 0x60, 0x87, 0x9b, 0x55, 0xcb, 0x5a, 0x61, 0x56, 0xd9, 0xad, 0x41, 0xc0, 0xb0, 0x06, 0x2b,
	0x4e, 0xd6, 0xea, 0xe0, 0x95, 0x8c, 0x52, 0xbb, 0x35, 0x08, 0x6c, 0x6c, 0xfc, 0x38, 0xea, 0x7a,
	0x87, 0x47, 0x5d, 0xef, 0xf7, 0x51, 0xd7, 0x3b, 0x38, 0xee, 0x4e, 0x1d, 0x1e, 0x77, 0xa7, 0x7e,
	0x1d, 0x77, 0xa7, 0x5e, 0x2e, 0xf7, 0x45, 0xcc, 0xc7, 0x3d, 0xbc, 0x2d, 0x77, 0x4f, 0x6c, 0xf2,
	0x0e, 0xb6, 0x89, 0xf7, 0x87, 0x2c, 0xea, 0x9d, 0xd3, 0x7f, 0xfc, 0x3f, 0xfa, 0x17, 0x00, 0x00,
	0xff, 0xff, 0xef, 0x80, 0xea, 0xdd, 0xea, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// this line is used by starport scaffolding # 2
	Hoho(ctx context.Context, in *QueryGetHohoRequest, opts ...grpc.CallOption) (*QueryGetHohoResponse, error)
	HohoAll(ctx context.Context, in *QueryAllHohoRequest, opts ...grpc.CallOption) (*QueryAllHohoResponse, error)
	Hihi(ctx context.Context, in *QueryGetHihiRequest, opts ...grpc.CallOption) (*QueryGetHihiResponse, error)
	HihiAll(ctx context.Context, in *QueryAllHihiRequest, opts ...grpc.CallOption) (*QueryAllHihiResponse, error)
	Haha(ctx context.Context, in *QueryGetHahaRequest, opts ...grpc.CallOption) (*QueryGetHahaResponse, error)
	HahaAll(ctx context.Context, in *QueryAllHahaRequest, opts ...grpc.CallOption) (*QueryAllHahaResponse, error)
	Hohosent(ctx context.Context, in *QueryGetHohosentRequest, opts ...grpc.CallOption) (*QueryGetHohosentResponse, error)
	HohosentAll(ctx context.Context, in *QueryAllHohosentRequest, opts ...grpc.CallOption) (*QueryAllHohosentResponse, error)
	Hihisent(ctx context.Context, in *QueryGetHihisentRequest, opts ...grpc.CallOption) (*QueryGetHihisentResponse, error)
	HihisentAll(ctx context.Context, in *QueryAllHihisentRequest, opts ...grpc.CallOption) (*QueryAllHihisentResponse, error)
	Hahasent(ctx context.Context, in *QueryGetHahasentRequest, opts ...grpc.CallOption) (*QueryGetHahasentResponse, error)
	HahasentAll(ctx context.Context, in *QueryAllHahasentRequest, opts ...grpc.CallOption) (*QueryAllHahasentResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Hoho(ctx context.Context, in *QueryGetHohoRequest, opts ...grpc.CallOption) (*QueryGetHohoResponse, error) {
	out := new(QueryGetHohoResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/Hoho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HohoAll(ctx context.Context, in *QueryAllHohoRequest, opts ...grpc.CallOption) (*QueryAllHohoResponse, error) {
	out := new(QueryAllHohoResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/HohoAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Hihi(ctx context.Context, in *QueryGetHihiRequest, opts ...grpc.CallOption) (*QueryGetHihiResponse, error) {
	out := new(QueryGetHihiResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/Hihi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HihiAll(ctx context.Context, in *QueryAllHihiRequest, opts ...grpc.CallOption) (*QueryAllHihiResponse, error) {
	out := new(QueryAllHihiResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/HihiAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Haha(ctx context.Context, in *QueryGetHahaRequest, opts ...grpc.CallOption) (*QueryGetHahaResponse, error) {
	out := new(QueryGetHahaResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/Haha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HahaAll(ctx context.Context, in *QueryAllHahaRequest, opts ...grpc.CallOption) (*QueryAllHahaResponse, error) {
	out := new(QueryAllHahaResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/HahaAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Hohosent(ctx context.Context, in *QueryGetHohosentRequest, opts ...grpc.CallOption) (*QueryGetHohosentResponse, error) {
	out := new(QueryGetHohosentResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/Hohosent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HohosentAll(ctx context.Context, in *QueryAllHohosentRequest, opts ...grpc.CallOption) (*QueryAllHohosentResponse, error) {
	out := new(QueryAllHohosentResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/HohosentAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Hihisent(ctx context.Context, in *QueryGetHihisentRequest, opts ...grpc.CallOption) (*QueryGetHihisentResponse, error) {
	out := new(QueryGetHihisentResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/Hihisent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HihisentAll(ctx context.Context, in *QueryAllHihisentRequest, opts ...grpc.CallOption) (*QueryAllHihisentResponse, error) {
	out := new(QueryAllHihisentResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/HihisentAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Hahasent(ctx context.Context, in *QueryGetHahasentRequest, opts ...grpc.CallOption) (*QueryGetHahasentResponse, error) {
	out := new(QueryGetHahasentResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/Hahasent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HahasentAll(ctx context.Context, in *QueryAllHahasentRequest, opts ...grpc.CallOption) (*QueryAllHahasentResponse, error) {
	out := new(QueryAllHahasentResponse)
	err := c.cc.Invoke(ctx, "/ltacker.jupiter.laugh.Query/HahasentAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// this line is used by starport scaffolding # 2
	Hoho(context.Context, *QueryGetHohoRequest) (*QueryGetHohoResponse, error)
	HohoAll(context.Context, *QueryAllHohoRequest) (*QueryAllHohoResponse, error)
	Hihi(context.Context, *QueryGetHihiRequest) (*QueryGetHihiResponse, error)
	HihiAll(context.Context, *QueryAllHihiRequest) (*QueryAllHihiResponse, error)
	Haha(context.Context, *QueryGetHahaRequest) (*QueryGetHahaResponse, error)
	HahaAll(context.Context, *QueryAllHahaRequest) (*QueryAllHahaResponse, error)
	Hohosent(context.Context, *QueryGetHohosentRequest) (*QueryGetHohosentResponse, error)
	HohosentAll(context.Context, *QueryAllHohosentRequest) (*QueryAllHohosentResponse, error)
	Hihisent(context.Context, *QueryGetHihisentRequest) (*QueryGetHihisentResponse, error)
	HihisentAll(context.Context, *QueryAllHihisentRequest) (*QueryAllHihisentResponse, error)
	Hahasent(context.Context, *QueryGetHahasentRequest) (*QueryGetHahasentResponse, error)
	HahasentAll(context.Context, *QueryAllHahasentRequest) (*QueryAllHahasentResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Hoho(ctx context.Context, req *QueryGetHohoRequest) (*QueryGetHohoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hoho not implemented")
}
func (*UnimplementedQueryServer) HohoAll(ctx context.Context, req *QueryAllHohoRequest) (*QueryAllHohoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HohoAll not implemented")
}
func (*UnimplementedQueryServer) Hihi(ctx context.Context, req *QueryGetHihiRequest) (*QueryGetHihiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hihi not implemented")
}
func (*UnimplementedQueryServer) HihiAll(ctx context.Context, req *QueryAllHihiRequest) (*QueryAllHihiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HihiAll not implemented")
}
func (*UnimplementedQueryServer) Haha(ctx context.Context, req *QueryGetHahaRequest) (*QueryGetHahaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Haha not implemented")
}
func (*UnimplementedQueryServer) HahaAll(ctx context.Context, req *QueryAllHahaRequest) (*QueryAllHahaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HahaAll not implemented")
}
func (*UnimplementedQueryServer) Hohosent(ctx context.Context, req *QueryGetHohosentRequest) (*QueryGetHohosentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hohosent not implemented")
}
func (*UnimplementedQueryServer) HohosentAll(ctx context.Context, req *QueryAllHohosentRequest) (*QueryAllHohosentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HohosentAll not implemented")
}
func (*UnimplementedQueryServer) Hihisent(ctx context.Context, req *QueryGetHihisentRequest) (*QueryGetHihisentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hihisent not implemented")
}
func (*UnimplementedQueryServer) HihisentAll(ctx context.Context, req *QueryAllHihisentRequest) (*QueryAllHihisentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HihisentAll not implemented")
}
func (*UnimplementedQueryServer) Hahasent(ctx context.Context, req *QueryGetHahasentRequest) (*QueryGetHahasentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hahasent not implemented")
}
func (*UnimplementedQueryServer) HahasentAll(ctx context.Context, req *QueryAllHahasentRequest) (*QueryAllHahasentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HahasentAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Hoho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHohoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Hoho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/Hoho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Hoho(ctx, req.(*QueryGetHohoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HohoAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHohoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HohoAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/HohoAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HohoAll(ctx, req.(*QueryAllHohoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Hihi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHihiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Hihi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/Hihi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Hihi(ctx, req.(*QueryGetHihiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HihiAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHihiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HihiAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/HihiAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HihiAll(ctx, req.(*QueryAllHihiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Haha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHahaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Haha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/Haha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Haha(ctx, req.(*QueryGetHahaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HahaAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHahaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HahaAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/HahaAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HahaAll(ctx, req.(*QueryAllHahaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Hohosent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHohosentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Hohosent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/Hohosent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Hohosent(ctx, req.(*QueryGetHohosentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HohosentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHohosentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HohosentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/HohosentAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HohosentAll(ctx, req.(*QueryAllHohosentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Hihisent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHihisentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Hihisent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/Hihisent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Hihisent(ctx, req.(*QueryGetHihisentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HihisentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHihisentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HihisentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/HihisentAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HihisentAll(ctx, req.(*QueryAllHihisentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Hahasent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHahasentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Hahasent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/Hahasent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Hahasent(ctx, req.(*QueryGetHahasentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HahasentAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHahasentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HahasentAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ltacker.jupiter.laugh.Query/HahasentAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HahasentAll(ctx, req.(*QueryAllHahasentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ltacker.jupiter.laugh.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hoho",
			Handler:    _Query_Hoho_Handler,
		},
		{
			MethodName: "HohoAll",
			Handler:    _Query_HohoAll_Handler,
		},
		{
			MethodName: "Hihi",
			Handler:    _Query_Hihi_Handler,
		},
		{
			MethodName: "HihiAll",
			Handler:    _Query_HihiAll_Handler,
		},
		{
			MethodName: "Haha",
			Handler:    _Query_Haha_Handler,
		},
		{
			MethodName: "HahaAll",
			Handler:    _Query_HahaAll_Handler,
		},
		{
			MethodName: "Hohosent",
			Handler:    _Query_Hohosent_Handler,
		},
		{
			MethodName: "HohosentAll",
			Handler:    _Query_HohosentAll_Handler,
		},
		{
			MethodName: "Hihisent",
			Handler:    _Query_Hihisent_Handler,
		},
		{
			MethodName: "HihisentAll",
			Handler:    _Query_HihisentAll_Handler,
		},
		{
			MethodName: "Hahasent",
			Handler:    _Query_Hahasent_Handler,
		},
		{
			MethodName: "HahasentAll",
			Handler:    _Query_HahasentAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "laugh/query.proto",
}

func (m *QueryGetHohoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHohoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHohoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHohoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHohoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHohoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hoho != nil {
		{
			size, err := m.Hoho.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHohoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHohoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHohoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHohoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHohoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHohoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hoho) > 0 {
		for iNdEx := len(m.Hoho) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hoho[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHihiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHihiRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHihiRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHihiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHihiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHihiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hihi != nil {
		{
			size, err := m.Hihi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHihiRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHihiRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHihiRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHihiResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHihiResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHihiResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hihi) > 0 {
		for iNdEx := len(m.Hihi) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hihi[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHahaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHahaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHahaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHahaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHahaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHahaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Haha != nil {
		{
			size, err := m.Haha.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHahaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHahaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHahaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHahaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHahaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHahaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Haha) > 0 {
		for iNdEx := len(m.Haha) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Haha[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHohosentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHohosentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHohosentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHohosentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHohosentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHohosentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hohosent != nil {
		{
			size, err := m.Hohosent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHohosentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHohosentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHohosentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHohosentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHohosentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHohosentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hohosent) > 0 {
		for iNdEx := len(m.Hohosent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hohosent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHihisentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHihisentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHihisentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHihisentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHihisentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHihisentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hihisent != nil {
		{
			size, err := m.Hihisent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHihisentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHihisentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHihisentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHihisentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHihisentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHihisentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hihisent) > 0 {
		for iNdEx := len(m.Hihisent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hihisent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHahasentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHahasentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHahasentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHahasentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHahasentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHahasentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hahasent != nil {
		{
			size, err := m.Hahasent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHahasentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHahasentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHahasentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHahasentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHahasentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHahasentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hahasent) > 0 {
		for iNdEx := len(m.Hahasent) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hahasent[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetHohoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHohoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hoho != nil {
		l = m.Hoho.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHohoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHohoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hoho) > 0 {
		for _, e := range m.Hoho {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHihiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHihiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hihi != nil {
		l = m.Hihi.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHihiRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHihiResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hihi) > 0 {
		for _, e := range m.Hihi {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHahaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHahaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Haha != nil {
		l = m.Haha.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHahaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHahaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Haha) > 0 {
		for _, e := range m.Haha {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHohosentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHohosentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hohosent != nil {
		l = m.Hohosent.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHohosentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHohosentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hohosent) > 0 {
		for _, e := range m.Hohosent {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHihisentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHihisentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hihisent != nil {
		l = m.Hihisent.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHihisentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHihisentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hihisent) > 0 {
		for _, e := range m.Hihisent {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHahasentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHahasentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hahasent != nil {
		l = m.Hahasent.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHahasentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHahasentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hahasent) > 0 {
		for _, e := range m.Hahasent {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetHohoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHohoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHohoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHohoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHohoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHohoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hoho", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hoho == nil {
				m.Hoho = &Hoho{}
			}
			if err := m.Hoho.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHohoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHohoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHohoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHohoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHohoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHohoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hoho", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hoho = append(m.Hoho, &Hoho{})
			if err := m.Hoho[len(m.Hoho)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHihiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHihiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHihiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHihiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHihiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHihiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hihi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hihi == nil {
				m.Hihi = &Hihi{}
			}
			if err := m.Hihi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHihiRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHihiRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHihiRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHihiResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHihiResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHihiResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hihi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hihi = append(m.Hihi, &Hihi{})
			if err := m.Hihi[len(m.Hihi)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHahaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHahaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHahaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHahaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHahaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHahaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Haha", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Haha == nil {
				m.Haha = &Haha{}
			}
			if err := m.Haha.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHahaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHahaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHahaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHahaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHahaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHahaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Haha", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Haha = append(m.Haha, &Haha{})
			if err := m.Haha[len(m.Haha)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHohosentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHohosentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHohosentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHohosentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHohosentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHohosentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hohosent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hohosent == nil {
				m.Hohosent = &Hohosent{}
			}
			if err := m.Hohosent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHohosentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHohosentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHohosentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHohosentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHohosentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHohosentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hohosent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hohosent = append(m.Hohosent, &Hohosent{})
			if err := m.Hohosent[len(m.Hohosent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHihisentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHihisentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHihisentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHihisentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHihisentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHihisentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hihisent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hihisent == nil {
				m.Hihisent = &Hihisent{}
			}
			if err := m.Hihisent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHihisentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHihisentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHihisentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHihisentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHihisentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHihisentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hihisent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hihisent = append(m.Hihisent, &Hihisent{})
			if err := m.Hihisent[len(m.Hihisent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHahasentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHahasentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHahasentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHahasentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHahasentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHahasentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hahasent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hahasent == nil {
				m.Hahasent = &Hahasent{}
			}
			if err := m.Hahasent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHahasentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHahasentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHahasentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHahasentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHahasentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHahasentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hahasent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hahasent = append(m.Hahasent, &Hahasent{})
			if err := m.Hahasent[len(m.Hahasent)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
